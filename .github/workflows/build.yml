name: Build and Release PDF Watermark Remover
permissions:
  contents: write
  pull-requests: write
on:
  push:
    branches: [ main ]
  workflow_dispatch:
jobs:
  build-and-release:
    runs-on: windows-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install pyarmor
        pip install -r requirements.txt
    
    - name: Get version from file
      id: get_version
      run: |
        if (Test-Path version.txt) {
          $version = Get-Content version.txt
          echo "VERSION=$version" >> $env:GITHUB_OUTPUT
        } else {
          echo "VERSION=1.0" >> $env:GITHUB_OUTPUT
        }
    
    - name: Check if tag exists
      id: check_tag
      run: |
        $tagExists = git tag -l "v${{ steps.get_version.outputs.VERSION }}"
        if ("$tagExists" -eq "v${{ steps.get_version.outputs.VERSION }}") {
          echo "TAG_EXISTS=true" >> $env:GITHUB_OUTPUT
        } else {
          echo "TAG_EXISTS=false" >> $env:GITHUB_OUTPUT
        }
    
    - name: Obfuscate Code with PyArmor
      run: |
        # Verify the entry point exists
        if (Test-Path run.py) {
          echo "Entry point run.py exists"
        } else {
          echo "Entry point run.py does not exist"
          exit 1
        }
        
        # Ensure the directory structure is correct
        if (Test-Path main/remove_watermark.py) {
          echo "File main/remove_watermark.py exists"
        } else {
          echo "File main/remove_watermark.py does not exist"
          exit 1
        }
        
        # Obfuscate the entire project recursively from the entry point
        pyarmor obfuscate --recursive --output dist_obf run.py
        
        # List obfuscated files to confirm
        Get-ChildItem -Path dist_obf -Recurse

    - name: Build with PyInstaller
      env:
        APP_SECRET_KEY: ${{ secrets.ENV_APP_SECRET_KEY }}
        ACTIVATION_SALT: ${{ secrets.ENV_ACTIVATION_SALT }}
      run: |
        # Create a temporary environment file that PyInstaller will include
        echo "APP_SECRET_KEY=$env:APP_SECRET_KEY" > .env
        echo "ACTIVATION_SALT=$env:ACTIVATION_SALT" >> .env
        
        # Copy all Python files to the root of dist_obf to make imports simpler
        Get-ChildItem -Path main -Filter *.py | Copy-Item -Destination dist_obf
        Get-ChildItem -Path mechanisms -Filter *.py | Copy-Item -Destination dist_obf
        Get-ChildItem -Path ui -Filter *.py | Copy-Item -Destination dist_obf
        
        # Use a simpler PyInstaller command
        python -m PyInstaller --onefile --windowed --icon=assets/icons/icon_remove_watermark.ico `
          --add-data "version.txt;." `
          --add-data ".env;." `
          --add-data "assets/*;assets" `
          dist_obf/run.py
        
        # Verify the executable was created
        if (Test-Path dist/run.exe) {
          $version = "${{ steps.get_version.outputs.VERSION }}"
          Rename-Item -Path "dist\run.exe" -NewName "Suppression_de_Filigrane_PDF-$version.exe"
          # Clean up the temporary environment file
          Remove-Item .env -Force
        } else {
          echo "PyInstaller failed to create the executable"
          exit 1
        }
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: Suppression_de_Filigrane_PDF-${{ steps.get_version.outputs.VERSION }}
        path: |
          dist/*.exe
        retention-days: 90
    
    - name: Create and push tag if it doesn't exist
      if: steps.check_tag.outputs.TAG_EXISTS == 'false'
      run: |
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        git tag -a v${{ steps.get_version.outputs.VERSION }} -m "Version ${{ steps.get_version.outputs.VERSION }}"
        git push origin v${{ steps.get_version.outputs.VERSION }}
    
    - name: Generate changelog if it doesn't exist
      if: steps.check_tag.outputs.TAG_EXISTS == 'false'
      run: |
        if (!(Test-Path CHANGELOG.md)) {
          echo "# Version ${{ steps.get_version.outputs.VERSION }}" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "## Changes" >> CHANGELOG.md
          echo "- Updated to version ${{ steps.get_version.outputs.VERSION }}" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "## Known Issues" >> CHANGELOG.md
          echo "- None" >> CHANGELOG.md
        }
    
    - name: Create GitHub Release
      if: steps.check_tag.outputs.TAG_EXISTS == 'false'
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.get_version.outputs.VERSION }}
        files: |
          dist/Suppression_de_Filigrane_PDF-${{ steps.get_version.outputs.VERSION }}.exe
        name: Version ${{ steps.get_version.outputs.VERSION }}
        body_path: CHANGELOG.md
        draft: false
        prerelease: false
        fail_on_unmatched_files: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Upload build artifacts for development
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          build/
          dist/
          *.spec
        retention-days: 14